[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "zhong_hong_vrf"
version = "1.0.0"
description = "Home Assistant integration for Zhong Hong VRF systems"
authors = [{name = "Johnny Zhang", email = "johnnybyzhang@gmail.com"}]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
]

[project.urls]
"Bug Reports" = "https://github.com/Johnnybyzhang/home-assistant-zhong-hong/issues"
"Source" = "https://github.com/Johnnybyzhang/home-assistant-zhong-hong"

[tool.black]
target-version = ['py311']
line-length = 100
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "PL", # pylint
    "S",  # flake8-bandit
    "UP", # pyupgrade
    "W",  # pycodestyle warnings
]
ignore = [
    "S101",  # Use of assert
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config --disable-warnings"
markers = [
    "asyncio: mark tests as asyncio tests",
]

[tool.coverage.run]
source = ["custom_components/zhong_hong_vrf"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
